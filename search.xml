<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>论文阅读笔记 基于深度图的三维重建算法</title>
    <url>/2020/01/05/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%9B%BE%E7%9A%84%E4%B8%89%E7%BB%B4%E9%87%8D%E5%BB%BA%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>论文题目：Accurate Multiple View 3D Reconstruction Using<br>Patch-Based Stereo for Large-Scale Scenes</p>
<p>作者：Shuhan Shen 年份：2013</p>
<p>这篇文章主要讲了如何利用patch-based的方法为每幅图都生成对应的深度图，然后将多幅深度图融合生成三维点云模型</p>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1gakdjoij3pj30kf0jtgw0.jpg" alt="image.png"></p>
<h3 id="1-选择合适的图像对"><a href="#1-选择合适的图像对" class="headerlink" title="1.选择合适的图像对"></a>1.选择合适的图像对</h3><p>为了计算一幅图对应的深度图，应当将它合适的邻近图选取出来。邻近图与待计算的图应该视角相近，而且基线的长度要比较合适，不能太长也不能太短。用$\theta_{ij}$表示相机$i$和相机$j$之间的视角，$d_{ij}$表示两相机之间的光心距离。先筛选出满足$0^\circ&lt;\theta_{ij}&lt;60^\circ$的相机，再在其中筛选出$0.05\bar{d}&lt;d_{ij}&lt;2\bar{d}$,$\bar{d}$表示所有图像两两之间光心距离的中值</p>
<h3 id="2-计算深度图"><a href="#2-计算深度图" class="headerlink" title="2.计算深度图"></a>2.计算深度图</h3><p>对于一副选择好的视图$I_i$和它的邻近图$I_j$，对于$I_i$上的每一个像素$p$都先初始化一个3D坐标下的support plane，一个support plane可由一个3D点$X_i$和一个法向量$n_i$表示</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1gakjleknlkj30jd0ha0up.jpg" alt="image.png"></p>
<p>support plane最开始初始化的值</p>
<script type="math/tex; mode=display">
X_i={\lambda}K_i^{-1}p</script><script type="math/tex; mode=display">
n_i=[cos\theta sin\phi,sin\theta sin\phi,cos\phi]^T</script><p>$\lambda$表示点在视图$I_i$的景深，取$\lambda\in[\lambda_{min},\lambda_{max}]$中的任意值做初值，之后再优化</p>
<p>同样的，$\theta\in[0^\circ,360^\circ],\phi\in[0^\circ,60^\circ]$,也取范围内的任意值做初值，这样的设置保证初始化的patch可以被当前相机观测到</p>
<p>有了初始化好的support plane后，就可以计算这个support plane在两幅视图之间的homography了</p>
<script type="math/tex; mode=display">
H_{ij}=K_j(R_jR_i^{-1}+\frac{R_j(C_i-C_j)n_i^T}{n_i^TX_i})K_i^{-1}</script><p>对于$I_i$上的每一个像素$q$，根据homography计算它在$I_j$上对应的$H_{ij}(q)$,计算$q$与$H_{ij}(q)$之间的NCC score</p>
<p>初始化之后，利用spatial propagation和random assignment对初值进行优化</p>
<p>spatial propagation是利用邻近点可能在同一个平面上的原理，将当前点的support plane传递给邻近点，如果NCC值变小了，则传递成功，如果没变小，则传递失败，原值不变。值得注意的是，这里做了两次迭代，第一次迭代从左上角往右下角传，第二次从右下角往左上角传，这样才能保证不会遗漏掉一些初值较好的点</p>
<p>random assignment是对$\lambda,\theta,\phi$进行随机微调，使NCC变小</p>
<p>在spatial propagation和random assignment后，我们将NCC值仍然高于某个阈值的点丢弃掉</p>
<h3 id="3-对深度图进行优化"><a href="#3-对深度图进行优化" class="headerlink" title="3.对深度图进行优化"></a>3.对深度图进行优化</h3><p>对$I_i$中的点$p$，可以根据几幅不同的共视图计算出不同的深度，如果这个深度与之前步骤2中得到的深度接近，那么这个点就可保留，不然就将这个点丢弃</p>
<h3 id="4-深度图融合"><a href="#4-深度图融合" class="headerlink" title="4.深度图融合"></a>4.深度图融合</h3><p>直接将之前得到的深度图进行融合会产生很多的冗余，如果一个3D点重投影在邻近图的深度比邻近图的深度图中这个点的深度要小，那么认为这个点在邻近图中是被遮挡住的，可以删去，，如果很接近，则认为这个点是重复的，也可删去，详见下图</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1gaklpru1tzj30k00lj78d.jpg" alt="image.png"></p>
<blockquote>
<p>Shen S. Accurate multiple view 3d reconstruction using patch-based stereo for large-scale scenes[J]. IEEE transactions on image processing, 2013, 22(5): 1901-1914.</p>
</blockquote>
]]></content>
      <tags>
        <tag>paper reading</tag>
      </tags>
  </entry>
  <entry>
    <title>cheirality</title>
    <url>/2019/12/08/cheirality/</url>
    <content><![CDATA[<p>cheirality是多视图几何中的一个专有名词，代表了3D点的一种性质</p>
<p>假设存在一个3D点$X_w$，有一个相机$C$,如果$X_w$在$C$的前面，也就是说该点的景深相对于这个相机是正的，那就说明这个点满足cheirality constraint</p>
<p>cheirality constraint一般可以用来从本质矩阵$E$的四组分解中筛选出正确的一组$R,t$</p>
<p>怎么验证一个点满足cheirality constraint：</p>
]]></content>
      <tags>
        <tag>Multiview Geometry</tag>
      </tags>
  </entry>
  <entry>
    <title>Sampson Error/Sampson Distance</title>
    <url>/2019/11/11/Sampson%20Error/</url>
    <content><![CDATA[<p>Sampson误差是复杂性介于代数误差和几何误差之间，但非常近似于几何误差的一种误差</p>
<p>先介绍一下<strong>代数误差</strong>，代数误差简单的说就是误差函数值的模，例如$Ah=\epsilon$的代数误差为$||Ah||^2$,其中$\epsilon$为误差向量，代数误差计算简便，但一般没有实际的物理意义，利用代数误差求出来的解可以用来做初值</p>
<p><strong>几何误差</strong>，在图像中可以看成点和点之间的几何距离，若$\hat x=Hx$,那么几何误差为$d(\hat x,Hx)$,想要使几何误差最小，需要同时估计$x,\hat x,H$,复杂性太高，因此引入了sampson误差（或者说sampson距离）</p>
<h2 id="sampson-error"><a href="#sampson-error" class="headerlink" title="sampson error"></a>sampson error</h2><p>对于一点$X$,满足$C_H(X)=0$,他的估计点为$\hat X=X+\delta_x,C_H(\hat X)=0$</p>
<script type="math/tex; mode=display">C_H(X+\delta_X)=C_H(X)+\frac{\partial C_H}{\partial X}\delta_X</script><script type="math/tex; mode=display">C_H(X)+\frac{\partial C_H}{\partial X}\delta_X=0</script><p>记为</p>
<script type="math/tex; mode=display">J\delta_X=-\epsilon</script><p>因此问题转化为求满足上式条件下使$||\delta_X||$最小的$\delta_X$</p>
<p>利用拉格朗日乘数法，引入拉格朗日乘子$\lambda$，问题转化为最小化$\delta_X^T\delta_X-\lambda^T(J\delta_X+\epsilon)$<br>不难求得Sampson误差为</p>
<script type="math/tex; mode=display">||\delta_X||^2=\delta_X^T\delta_X=\epsilon^T(JJ^T)^{-1}\epsilon</script><p>在$x’Fx=0$中，$\frac{\epsilon^t\epsilon}{JJ^t}=\frac{(x’Fx)^2}{JJ^T}$</p>
<script type="math/tex; mode=display">JJ^T=(Fx_i)_1^2+(Fx_i)_2^2+(F^Tx_i')_1^2+(F^Tx_i')_2^2</script><p>Sampson Distance为</p>
<script type="math/tex; mode=display">||\epsilon||^2=\frac{(x'Fx)^2}{(Fx_i)_1^2+(Fx_i)_2^2+(F^Tx_i')_1^2+(F^Tx_i')_2^2}</script><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote>
<p>Hartley R, Zisserman A. Multiple view geometry in computer vision[M]. Cambridge university press, 2003.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Multiview Geometry</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab visison sfm学习笔记</title>
    <url>/2019/11/10/matlab-visison-sfm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>matlab从r2019a版本开始在Computer Vision Toolbox中提供了一套完整的sfm程序，输入标定好的图像序列，可以计算出相机位姿进行稀疏重建和稠密重建</p>
<p><a href="https://ww2.mathworks.cn/help/vision/examples/structure-from-motion-from-multiple-views.html" target="_blank" rel="noopener">matlab sfm文档链接</a></p>
<p>matlab sfm基本步骤：</p>
<ol>
<li>输入图像，检测图像SURF特征点</li>
<li>5点法RANSAC计算双视图本质矩阵E</li>
<li>由E分解出四组R,t，三角化重建三维点，利用正负景深筛选出正确的R,t</li>
<li>双视图下做BA优化，得到BA修正后的R,t,X</li>
<li>最后一对视图BA得到的X作为最后稀疏重建结果展示的X</li>
<li>稠密重建</li>
</ol>
<p>输入图片序列</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1g8t57s77trj30rd0llat9.jpg" alt="image.png"></p>
<p>稀疏重建结果</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1g8t5626zloj30fk0bo74r.jpg" alt="image.png"></p>
<p>其实程序写的很简单明了，很容易就能看懂，需要注意的是这个程序中投影方程的形式是<br>$x=K(RX-t)$</p>
<p>$R$和$t$就是最后程序输出的orientation和location</p>
<p>在RANSAC中用Sampson distance计算误差,判断是否为内点</p>
<script type="math/tex; mode=display">\sum \frac{x_i'Fx_i}{(Fx_i)_1^2+(Fx_i)_2^2+(F^Tx_i')_1^2+(F^Tx_i')_2^2}</script>]]></content>
      <tags>
        <tag>practice</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读笔记 why BA？</title>
    <url>/2019/11/04/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0whyBA/</url>
    <content><![CDATA[<blockquote>
<p>Visual SLAM：Why Bundle Adjust?</p>
<p><a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Parra%2C+Á" target="_blank" rel="noopener">Álvaro Parra</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Chin%2C+T" target="_blank" rel="noopener">Tat-Jun Chin</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Eriksson%2C+A" target="_blank" rel="noopener">Anders Eriksson</a>, <a href="https://arxiv.org/search/cs?searchtype=author&amp;query=Reid%2C+I" target="_blank" rel="noopener">Ian Reid</a></p>
<p>ICRA 2019</p>
</blockquote>
<p>在BA的基础上做了些修改，简单的说，BA把R，t，X放到一起优化，而这篇文章提出的新BA把R和t，X分开优化，先优化R，再在优化得到的R的基础上再优化R，t</p>
<p>传统BA流程图</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1g8m24uam3uj30ed095gmu.jpg" alt="BA.PNG"></p>
<p>重投影误差公式：<br> $$\min_{{X_j},{(R_j,t_j)}}\sum_{i,j}||u_{i,j}-f(X_j|R_j,t_j)||^2_2$$ </p>
<p>其中$u_{i,j}$是第$j$个点在第$i$幅图中的投影</p>
<p>新方法流程图</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1g8m34ghulhj30ec096wfy.jpg" alt="new_BA.PNG"></p>
<p>在求得相对$R$的情况下，利用rotation averaging计算绝对$R$</p>
$$\min_{\{R_j\}}\sum_{i,j\in N}||R_{j,k}-R_kR_j^{-1}||^2_F$$
<p>在已知R的情况下，用优化的方法计算t和X<br>$$\min_{{X_i},{t_j}}\gamma
\\subject \ to \||A_{i,j}\begin{bmatrix}X_i\\t_j\end{bmatrix}||_2-\gamma b_j^T\begin{bmatrix}X_i\\t_j\end{bmatrix},\forall i,j
\\ \gamma\geq0$$<br>$$A_{i,j}=[S_{i,j},I_{2\times2}-z_{i,j}],b_j=[R_j^{(3)}, 0, 0, 1]^T,S_{i,j}=R^{(1:2)}_j-z_{i,j}R_j^{(3)}$$<br>这个被称为Known rotation problem（KRot）,同时论文中还给平移向量加上了角度约束<br>$$\angle(t_{j,k},C_k-C_j)\leq\alpha \quad \forall j,k$$<br>$C_k,C_j$是绝对t，$C_j=-R^T_jt_j$，加上这个约束问题被称为krot_tdc,tdc代表translation direction constraints<br>部分实验结果图</p>
<p><img src="http://ww1.sinaimg.cn/large/007y4ewTly1g8m4v56p0gj30f80nf416.jpg" alt="result.PNG"></p>
<p>可以看到，新方法比传统BA效果要好，在新方法后再加一层BA可以使误差进一步降低，但会出现几次较为严重的错误情况，可能是因为BA对缓慢移动或纯旋转的鲁棒性不够强，而新方法的鲁棒性较强</p>
]]></content>
      <tags>
        <tag>paper reading</tag>
      </tags>
  </entry>
  <entry>
    <title>Epipolar Recitification</title>
    <url>/2019/10/27/EpipolarRecitification/</url>
    <content><![CDATA[<p>在进行极线搜索时，为了方便，将极点通过射影变换转至无穷远点，则图上的极线都变成了平行线，便于搜索<br><em>PAT：</em> <strong>只能在极点位于图像外时使用这种方法，极点在图像内时，极点周围的点也会被变换到无穷远处</strong></p>
<h2 id="变换矩阵H的形式"><a href="#变换矩阵H的形式" class="headerlink" title="变换矩阵H的形式"></a>变换矩阵H的形式</h2><script type="math/tex; mode=display">He=[1,0,0]^T</script><p>$H$最少有6个自由度,为了减少畸变，应该使$H$接近刚体变换,$H=GG_RG_T\in R^{3\times3}$</p>
<script type="math/tex; mode=display">
G_T=\begin{bmatrix}1&0&-O_x\\0&1&-O_y\\0&0&1\\\end{bmatrix}</script><p>其中$O_x,O_y$是图像中心,$G_T\begin{bmatrix}O_x\\O_y\\1\end{bmatrix}=\begin{bmatrix}0\\0\\1\end{bmatrix}$  </p>
<p>$G_T$将极点变换到图像坐标系下，再通过刚体变换$G_R\in SO(3)$将极点变换到x轴上,$G_R$是以z轴为旋转轴的旋转矩阵</p>
<script type="math/tex; mode=display">G_RG_Te=[x_e,0,1]^T</script><p>要使$G[x_e,0,1]=[1,0,0]^T$,则$G=\begin{bmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\ -\frac{1}{x_e}&amp;0&amp;1\end{bmatrix}$</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote>
<p>Hartley R, Zisserman A. Multiple view geometry in computer vision[M]. Cambridge university press, 2003.</p>
</blockquote>
]]></content>
      <tags>
        <tag>Multiview Geometry</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
